require('dotenv').config({ path: '.env.local' })
const { createClient } = require('@supabase/supabase-js')

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

const supabase = createClient(supabaseUrl, supabaseKey)

async function makeAdmin() {
  console.log('๐ง ุชุญุฏูุซ ุตูุงุญูุงุช ุงููุณุชุฎุฏู ุฅูู admin...')
  
  try {
    // Get all users first
    console.log('\n๐ ุนุฑุถ ุฌููุน ุงููุณุชุฎุฏููู...')
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('id, username, full_name, role')
    
    if (profilesError) {
      console.error('โ ุฎุทุฃ ูู ูุฑุงุกุฉ ุงููุณุชุฎุฏููู:', profilesError.message)
      return
    }
    
    console.log('ุงููุณุชุฎุฏููู ุงูุญุงูููู:')
    profiles.forEach((profile, index) => {
      console.log(`${index + 1}. ID: ${profile.id}`)
      console.log(`   ุงูุงุณู: ${profile.full_name || profile.username || 'ุบูุฑ ูุญุฏุฏ'}`)
      console.log(`   ุงูุฏูุฑ: ${profile.role}`)
      console.log('---')
    })
    
    if (profiles.length === 0) {
      console.log('โ ูุง ููุฌุฏ ูุณุชุฎุฏููู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช')
      return
    }
    
    // Try to update using RPC function
    const firstUserId = profiles[0].id
    console.log(`\n๐ ูุญุงููุฉ ุชุญุฏูุซ ุงููุณุชุฎุฏู ุงูุฃูู (${firstUserId}) ุฅูู admin...`)
    
    // First try direct update
    const { data: updateData, error: updateError } = await supabase
      .from('profiles')
      .update({ role: 'admin' })
      .eq('id', firstUserId)
      .select()
    
    if (updateError) {
      console.error('โ ุฎุทุฃ ูู ุงูุชุญุฏูุซ ุงููุจุงุดุฑ:', updateError.message)
      
      // Try using RPC if available
      console.log('\n๐ ูุญุงููุฉ ุงุณุชุฎุฏุงู RPC function...')
      const { data: rpcData, error: rpcError } = await supabase
        .rpc('update_user_role', {
          user_id: firstUserId,
          new_role: 'admin'
        })
      
      if (rpcError) {
        console.error('โ ุฎุทุฃ ูู RPC:', rpcError.message)
        console.log('\n๐ก ุญููู ููุชุฑุญุฉ:')
        console.log('1. ุชุณุฌูู ุงูุฏุฎูู ุฅูู Supabase Dashboard')
        console.log('2. ุงูุฐูุงุจ ุฅูู Table Editor > profiles')
        console.log('3. ุชุญุฏูุซ ุนููุฏ role ูููุณุชุฎุฏู ุงููุทููุจ ุฅูู "admin" ูุฏููุงู')
        console.log('4. ุฃู ุชุนุทูู Row Level Security ูุคูุชุงู ููุชุญุฏูุซ')
        console.log('\n๐ ุฑุงุจุท Supabase Dashboard:')
        console.log('https://supabase.com/dashboard/project/jrtctjgdkvkdrjcbbbaz')
      } else {
        console.log('โ ุชู ุงูุชุญุฏูุซ ุจุงุณุชุฎุฏุงู RPC!')
      }
    } else {
      console.log('โ ุชู ุชุญุฏูุซ ุงูุฏูุฑ ุจูุฌุงุญ!')
      console.log('ุงููุณุชุฎุฏู ุงูุขู admin:', updateData[0])
    }
    
    console.log('\n๐ ุจุนุฏ ุงูุชุญุฏูุซุ ููููู:')
    console.log('1. ุชุณุฌูู ุงูุฏุฎูู ุจุญุณุงุจ ุงููุณุชุฎุฏู ุงููุญุฏุซ')
    console.log('2. ุงููุตูู ูููุญุฉ ุงูุฅุฏุงุฑุฉ ุนูู /admin')
    console.log('3. ุฅุฏุงุฑุฉ ุงููุณุชุฎุฏููู ูุงูุฃูุนุงุจ')
    
  } catch (error) {
    console.error('โ ุฎุทุฃ ุนุงู:', error.message)
  }
}

makeAdmin().catch(console.error)